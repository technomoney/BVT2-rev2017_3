
using HeathenEngineering.Scriptable;
using System;
using UnityEngine;
using UnityEngine.Events;

namespace HeathenEngineering.Serializable
{
    /****************************************************************
     * Unity's built in property drawers cannot draw generic classes
     * They can however draw serializables derived from them, this 
     * simply makes it possible for the default UnityEvent property 
     * drawer to correctly draw single and double parameter UnityEvents
     * 
     * To insure you are able to update HeathenSystemCore easily and without
     * error please do not edit this file, create a new empty C# file and
     * add any additional UnityEvent derived classes there.
     * 
     * Note Unity built in property drawers should be able to handle up to
     * '5 parameter' Unity Events assuming all parameters are compatable 
     * with the built in drawers or have custom property drawers provided
     * 
     * Nameing Conventions
     * For Single Parameter:                    Unity + <Data Type> + Event
     * For Double Parameter (.NET style):       UnitySender + <Data Type> + Event
     ****************************************************************/

    //Commonly used single parameter UnityEvents
    #region Single Parameter Events
    [Serializable]
    public class UnityFloatEvent : UnityEvent<float>
    { }

    [Serializable]
    public class UnityIntEvent : UnityEvent<int>
    { }

    [Serializable]
    public class UnityBoolEvent : UnityEvent<bool>
    { }

    [Serializable]
    public class UnityDoubleEvent : UnityEvent<double>
    { }

    [Serializable]
    public class UnityStringEvent : UnityEvent<string>
    { }

    [Serializable]
    public class UnityColorEvent : UnityEvent<Color>
    { }

    [Serializable]
    public class UnitySerializableColorEvent : UnityEvent<SerializableColor>
    { }

    [Serializable]
    public class UnitySpriteEvent : UnityEvent<Sprite>
    { }

    [Serializable]
    public class UnityTextureEvent : UnityEvent<Texture>
    { }

    [Serializable]
    public class UnityRigidbodyEvent : UnityEvent<Rigidbody>
    { }

    [Serializable]
    public class UnityColliderEvent : UnityEvent<Collider>
    { }

    [Serializable]
    public class UnityCollisionEvent : UnityEvent<Collision>
    { }
    
    [Serializable]
    public class UnityTransformEvent : UnityEvent<Transform>
    { }

    [Serializable]
    public class UnityRectTransformEvent : UnityEvent<RectTransform>
    { }

    [Serializable]
    public class UnityGameObjectEvent : UnityEvent<GameObject>
    { }

    [Serializable]
    public class UnityVector2Event : UnityEvent<Vector2>
    { }

    [Serializable]
    public class UnityVector2IntEvent : UnityEvent<Vector2Int>
    { }

    [Serializable]
    public class UnitySerializableVector2Event : UnityEvent<SerializableVector2>
    { }

    [Serializable]
    public class UnitySerializableVector2IntEvent : UnityEvent<SerializableVector2Int>
    { }

    [Serializable]
    public class UnityVector3Event : UnityEvent<Vector3>
    { }

    [Serializable]
    public class UnitySerializableVector3Event : UnityEvent<SerializableVector3>
    { }

    [Serializable]
    public class UnityVector4Event : UnityEvent<Vector4>
    { }

    [Serializable]
    public class UnitySerializableVector4Event : UnityEvent<SerializableVector4>
    { }

    [Serializable]
    public class UnityQuaternionEvent : UnityEvent<Quaternion>
    { }
    #endregion

    //Commonly used double parameter UnityEvents in .NET style with a Unity twist e.g. eventHandler(GameObject sender, T data)
    #region Double Parameter Events
    [Serializable]
    public class UnitySenderFloatEvent : UnityEvent<GameObject, float>
    { }

    [Serializable]
    public class UnitySenderIntEvent : UnityEvent<GameObject, int>
    { }

    [Serializable]
    public class UnitySenderBoolEvent : UnityEvent<GameObject, bool>
    { }

    [Serializable]
    public class UnitySenderDoubleEvent : UnityEvent<GameObject, double>
    { }

    [Serializable]
    public class UnitySenderStringEvent : UnityEvent<GameObject, string>
    { }

    [Serializable]
    public class UnitySenderColorEvent : UnityEvent<GameObject, Color>
    { }

    [Serializable]
    public class UnitySenderSpriteEvent : UnityEvent<GameObject, Sprite>
    { }

    [Serializable]
    public class UnitySenderTextureEvent : UnityEvent<GameObject, Texture>
    { }

    [Serializable]
    public class UnitySenderRigidbodyEvent : UnityEvent<GameObject, Rigidbody>
    { }

    [Serializable]
    public class UnitySenderColliderEvent : UnityEvent<GameObject, Collider>
    { }

    [Serializable]
    public class UnitySenderCollisionEvent : UnityEvent<GameObject, Collision>
    { }

    [Serializable]
    public class UnitySenderTransformEvent : UnityEvent<GameObject, Transform>
    { }

    [Serializable]
    public class UnitySenderRectTransformEvent : UnityEvent<GameObject, RectTransform>
    { }

    [Serializable]
    public class UnitySenderGameObjectEvent : UnityEvent<GameObject, GameObject>
    { }

    [Serializable]
    public class UnitySenderVector2Event : UnityEvent<GameObject, Vector2>
    { }

    [Serializable]
    public class UnitySenderVector3Event : UnityEvent<GameObject, Vector3>
    { }

    [Serializable]
    public class UnitySenderVector4Event : UnityEvent<GameObject, Vector4>
    { }

    [Serializable]
    public class UnitySenderQuaternionEvent : UnityEvent<GameObject, Quaternion>
    { }
    #endregion

    //Specialized event structures for variable events used by variable objects
    #region Variable base Events
    [Serializable]
    public abstract class VariableEvent<T> : UnityEvent<DataVariable<T>, T>
    { }

    [Serializable]
    public class VariableFloatEvent : UnityEvent<FloatVariable, float>
    { }

    [Serializable]
    public class VariableIntEvent : UnityEvent<IntVariable, int>
    { }

    [Serializable]
    public class VariableBoolEvent : VariableEvent<bool>
    { }

    [Serializable]
    public class VariableStringEvent : UnityEvent<StringVariable, string>
    { }

    [Serializable]
    public class VariableDoubleEvent : UnityEvent<DoubleVariable, double>
    { }

    [Serializable]
    public class VariableColorEvent : UnityEvent<ColorVariable, Color>
    { }

    [Serializable]
    public class VariableVector2Event : UnityEvent<Vector2Variable, Vector2>
    { }

    [Serializable]
    public class VariableVector3Event : UnityEvent<Vector3Variable, Vector3>
    { }

    [Serializable]
    public class VariableVector4Event : UnityEvent<Vector4Variable, Vector4>
    { }
    #endregion
}
